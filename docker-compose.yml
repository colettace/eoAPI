version: '3'

services:

  # The dockerfile that creates this image uses an nginx:1-alpine-slim base image
  # And copies a fresh checkout of the main branch of stac-browser into the app directory.
  stac-browser:
    container_name: base_stac_browser_container
    platform: linux/amd64
    build:
      context: dockerfiles
      dockerfile: Dockerfile.browser
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:8085:8085"
    depends_on:
      - stac-fastapi
      - titiler-pgstac
      - database
      
  stac-fastapi:
    container_name: base_stac_api_container
    # Note:
    # the official ghcr.io/stac-utils/stac-fastapi-pgstac image uses python 3.8 and uvicorn
    # which is why here we use a custom Dockerfile using python 3.11 and gunicorn
    platform: linux/amd64
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.stac
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:8081:8081"
    environment:
      # Application
      - HOST=0.0.0.0
      - PORT=8081
      #- MODULE_NAME=stac_fastapi.pgstac.app
      #- MODULE_NAME=eoapi.stac.app
      - VARIABLE_NAME=app
      # gunicorn
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#web_concurrency
      - WEB_CONCURRENCY=10
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#workers_per_core
      # - WORKERS_PER_CORE=1
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#max_workers
      # - MAX_WORKERS=10
      # Postgres connection
      - POSTGRES_USER=username
      - POSTGRES_PASS=password
      - POSTGRES_DBNAME=postgis
      - POSTGRES_HOST_READER=database
      - POSTGRES_HOST_WRITER=database
      - POSTGRES_PORT=5432
      - DB_MIN_CONN_SIZE=1
      - DB_MAX_CONN_SIZE=10
      # PgSTAC extensions
      - EOAPI_STAC_EXTENSIONS=["filter", "query", "sort", "fields", "pagination", "context", "transaction"]
      - EOAPI_STAC_CORS_METHODS='GET,POST,PUT,OPTIONS'
    depends_on:
      - database
    command:
      bash -c "bash /tmp/scripts/wait-for-it.sh -t 120 -h database -p 5432 && /start.sh"
    volumes:
      - ./dockerfiles/scripts:/tmp/scripts

  titiler-pgstac:
    container_name: base_titiler_container
    profiles:
      - full_eoapi
    # At the time of writing, rasterio and psycopg wheels are not available for arm64 arch
    # so we force the image to be built with linux/amd64
    platform: linux/amd64
    image: ghcr.io/stac-utils/titiler-pgstac:1.0.0a3
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:8082:8082"
    environment:
      # Application
      - HOST=0.0.0.0
      - PORT=8082
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#web_concurrency
      - WEB_CONCURRENCY=1
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#workers_per_core
      - WORKERS_PER_CORE=1
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#max_workers
      - MAX_WORKERS=10
      # Postgres connection
      - POSTGRES_USER=username
      - POSTGRES_PASS=password
      - POSTGRES_DBNAME=postgis
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - DB_MIN_CONN_SIZE=1
      - DB_MAX_CONN_SIZE=10
      # - DB_MAX_QUERIES=10
      # - DB_MAX_IDLE=10
      # GDAL Config
      - CPL_TMPDIR=/tmp
      - GDAL_CACHEMAX=75%
      - GDAL_INGESTED_BYTES_AT_OPEN=32768
      - GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR
      - GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES
      - GDAL_HTTP_MULTIPLEX=YES
      - GDAL_HTTP_VERSION=2
      - VSI_CACHE=TRUE
      - VSI_CACHE_SIZE=536870912
      # TiTiler Config
      - MOSAIC_CONCURRENCY=1
      # AWS S3 endpoint config
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - database
    command:
      bash -c "bash /tmp/scripts/wait-for-it.sh -t 120 -h database -p 5432 && /start.sh"
    volumes:
      - ./dockerfiles/scripts:/tmp/scripts

  tipg:
    container_name: base_tipg_container
    profiles:
      - full_eoapi
    platform: linux/amd64
    image: ghcr.io/developmentseed/tipg:0.5.0
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:8083:8083"
    environment:
      # Application
      - HOST=0.0.0.0
      - PORT=8083
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#web_concurrency
      - WEB_CONCURRENCY=10
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#workers_per_core
      # - WORKERS_PER_CORE=1
      # https://github.com/tiangolo/uvicorn-gunicorn-docker#max_workers
      # - MAX_WORKERS=10
      # Postgres connection
      - POSTGRES_USER=username
      - POSTGRES_PASS=password
      - POSTGRES_DBNAME=postgis
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - DB_MIN_CONN_SIZE=1
      - DB_MAX_CONN_SIZE=10
    command:
      bash -c "bash /tmp/scripts/wait-for-it.sh -t 120 -h database -p 5432 && /start.sh"
    depends_on:
      - database
    volumes:
      - ./dockerfiles/scripts:/tmp/scripts

  database:
    container_name: base_pgstac_database_container
    platform: linux/amd64
    image: ghcr.io/stac-utils/pgstac:v0.8.5
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgis
      - PGUSER=username
      - PGPASSWORD=password
      - PGDATABASE=postgis
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:5439:5432"
    command: postgres -N 500
    volumes:
      - ./.pgdata:/var/lib/postgresql/data

  jupyterhub:
    container_name: base_jupyterhub_container
    platform: linux/amd64
    image: quay.io/jupyter/all-spark-notebook
    ports:
      - "${MY_DOCKER_IP:-127.0.0.1}:8888:8888"
    environment:
      JUPYTER_TOKEN: "password"

    # Adding pgAdmin service
  pgadmin:
    container_name: base_pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "80:80"
    depends_on:
      - database

networks:
  default:
    name: eoapi-network
